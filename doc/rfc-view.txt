*rfc-view.nvim*
*rfc-view*

==============================================================================
CONTENTS                                                *rfc-view-contents*

    1. Introduction.......................|rfc-view-introduction|
    2. Installation.......................|rfc-view-installation|
    3. Configuration......................|rfc-view-configuration|
    4. Commands...........................|rfc-view-commands|
    5. Functions..........................|rfc-view-functions|
    6. Keymaps............................|rfc-view-keymaps|
    7. Changelog..........................|rfc-view-changelog|

==============================================================================
1. INTRODUCTION                                         *rfc-view-introduction*

`rfc-view.nvim` is a Neovim plugin designed for viewing and searching
of RFC documents. It allows you to download, view, and
search RFCs, whether locally cached or retrieved directly from the IETF RFC
Editor website, and then open them as Neovim buffers.

Features include:
- Retrieve and display RFCs by name or number.
- Download specific RFCs.
- Download all RFCs from the IETF RFC Editor website at once.
- Cache RFCs as neovim buffers.
- Fuzzy search for downloaded RFCs.

For bug reports or feature requests, please visit the GitHub repository:
https://github.com/neet-007/rfc-view.nvim

------------------------------------------------------------------------------
2. INSTALLATION                                         *rfc-view-installation*

This plugin requires Neovim 0.7.0 or a more recent version.
This plugin requires Go 1.21 or a more recent version.

Using |lazy.nvim|:
>lua
    {
      'neet-007/rfc-view.nvim',
      branch = 'master',
      build = 'cd go && go build main.go',
      config = function()
        require('rfcview').setup {}
      end,
      keys = {
        -- Example keymaps for the plugin's main functions
        {
          '<leader>ro',
          function()
            require('rfcview').open_rfc()
          end,
          desc = '[R]FC [O]pen Main Window',
        },
        {
          '<leader>rc',
          function()
            require('rfcview').close_rfc()
          end,
          desc = '[R]FC [C]lose All Windows',
        },
      },
    },
<

Using |packer.nvim|:
>lua
    use {
      'neet-007/rfc-view.nvim',
      run = 'cd go && go build main.go',
      config = function()
        require('rfcview').setup()
      end,
    }
<
(Note: You'll typically define your keymaps separately or within the `setup` options
for Packer, as it doesn't have a dedicated `keys` table like Lazy.)

------------------------------------------------------------------------------
3. CONFIGURATION                                        *rfc-view-configuration*
*rfcview.setup()*
*rfc-view-setup*

The plugin can be configured by passing an options table to the `setup` function.
It is highly recommended to call `setup` even if you use default options to ensure
the plugin initializes correctly.

>lua
    require('rfcview').setup({
      -- Whether to delete RFC buffers when the plugin's windows are closed.
      -- If true, buffers are deleted; otherwise, they remain open in the background.
      -- (defaults to false)
      delete_buffers_when_closing = false,

      -- Table for custom keymaps within the plugin's RFC buffers and floating windows.
      -- These define actions like viewing, listing, searching, etc.
      -- See |rfc-view-keymaps| for default values and examples.
      keys = {
        -- view = "m",          -- Opens a view to the current RFC buffer
        -- list = "n",          -- Lists all locally downloaded RFCs
        -- search = "b",        -- Opens a search window for online RFCs
        -- search_header = "v", -- Focuses on the search header input
        -- select = "<CR>",     -- Triggers action for the current item in a list
        -- add_to_view = "s",   -- Adds an RFC to cached (locally downloaded) RFCs
        -- delete = "d",        -- Deletes current item from list; if in list view, deletes from disk
        -- refresh = "r",       -- Refreshes the current window to its latest state
        -- hard_refresh = "R",  -- Performs a hard refresh (e.g., re-fetches data)
        -- delete_all = "D",    -- Deletes all items associated with the current window (see `delete` feature)
        -- view_list = "z",     -- Opens the cached RFCs list
        -- next_search = "ns",  -- Navigates to the next page in search results
        -- ...
      },

      -- Whether to log non-error messages to the Neovim notification area.
      -- (defaults to true)
      log_non_errros = true,

      -- Directory to download RFCs to.
      -- (defaults to ~/.rfc_dirs_nvim)
      rfc_dir = "PATH"
    })
<

------------------------------------------------------------------------------
4. COMMANDS                                             *rfc-view-commands*

------------------------------------------------------------------------------
5. FUNCTIONS                                            *rfc-view-functions*

These functions expose the plugin's core functionality and can be called
programmatically from your `init.lua` or other Lua scripts.

`require("rfcview").open_rfc()`                         *rfcview.open_rfc()*
    Opens the main floating window interface of the plugin, providing access
    to search, local list, and viewing capabilities.

    Arguments:
      None.

    Returns:
      None.

`require("rfcview").close_rfc()`                        *rfcview.close_rfc()*
    Closes all floating windows and buffers currently managed by the plugin.

    Arguments:
      None.

    Returns:
      None.

`require("rfcview").delete_buffers(delete_cached_files)` *rfcview.delete_buffers()*
    Deletes the buffers created by the plugin. If `delete_cached_files` is
    `true`, it will also remove the corresponding RFC files from your local cache.

    Arguments:
      `delete_cached_files` (boolean): If `true`, also deletes RFC files from the cache.

    Returns:
      None.

------------------------------------------------------------------------------
6. KEYMAPS                                              *rfc-view-keymaps*

`rfc-view.nvim` creates context-specific keymaps for its buffers and floating
windows. You can customize these keymaps by providing a `keys` table in the
plugin's `setup` configuration.

The following table lists the default keymaps and their functions:

>lua
    local default_keys = {
      view        = "m",   -- Opens a view to the current RFC buffer
      list        = "n",   -- Lists all locally downloaded RFCs
      search      = "b",   -- Opens a search window for online RFCs
      search_header = "v", -- Focuses on the search input header
      select      = "<CR>",-- Triggers the action of the currently selected item in a list
      add_to_view = "s",   -- Adds the current online RFC search result to cached RFCs
      delete      = "d",   -- Deletes the current item from the list; if in list view, also deletes from disk
      refresh     = "r",   -- Refreshes the current window to its latest state
      hard_refresh = "R",  -- Performs a hard refresh (e.g., re-fetches all data)
      delete_all  = "D",   -- Deletes all items associated with the current window (see `delete` behavior)
      view_list   = "z",   -- Opens the cached RFCs list
      next_search = "ns",  -- Navigates to the next page in search results
    }
<

Additionally, you need to add global keymaps to open and close the main plugin
interface. These are typically defined in your Neovim configuration file
(e.g., |init.lua|) as part of your `lazy.nvim` or `packer.nvim` setup.

Example global keymaps (as seen in |rfc-view-installation|):
>lua
    keys = {
      { '<leader>ro', function() require('rfcview').open_rfc() end, desc = '[R]FC [O]pen Main Window' },
      { '<leader>rc', function() require('rfcview').close_rfc() end, desc = '[R]FC [C]lose All Windows' },
    },
<
------------------------------------------------------------------------------
7. CHANGELOG                                            *rfc-view-changelog*

* **0.1.0** (2025-07-26)
    * Initial release.
    * Core functionality for RFC fetching, viewing, and basic management.
    * Introduced configuration options for `keys` and `delete_buffers_when_closing`.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
